name: 'Terraform CI'
on:
  push:
    branches: [ "feature/*" ]
  pull_request:
  workflow_dispatch:
    inputs:
      TFAction:
        description: "Terraform Action- Apply or Destroy"     
        required: true
        default: "apply"


permissions:
  contents: read

jobs:
  tf_validate:
    name: 'Terraform CI'
    runs-on: ubuntu-latest

    environment: dev

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TerraformBackendStorageAccount: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TerraformBackendResourceGroup: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TerraformBackendStorageContainer: ${{ secrets.TF_BACKEND_CONTAINER }}    
      environmentName: dev     
      
    defaults:
      run:
        shell: bash

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    
    - name: Replace variables into files terraform
      uses: "./.github/workflows/template/replace-tokens/"
      with:
        ObjectID_SPA_kevault_read: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ObjectID_SPA_kevault_full: ${{ secrets.AZURE_AD_CLIENT_ID }}
        clintid_AKS: ${{ secrets.AZURE_AD_CLIENT_ID }}
        Secret_AKS: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        Password_nodes_windons: ${{ secrets.ADMINPASSWORDWINDOWS }}
        Password_vms_windons: ${{secrets.ADMINPASSWORDWINDOWS}}
        shared_key_vpn: ${{ secrets.AZURE_VPN_KEY }}

    - name: Generate ssh  Kubernets
      run: |
        mkdir -p ~/.ssh/aks-$environmentName-sshkeys-terraform/
        ssh-keygen -f ~/.ssh/aks-$environmentName-sshkeys-terraform/aks-$environmentName-sshkey -N ''
        cp ~/.ssh/aks-$environmentName-sshkeys-terraform/*  ${{ github.workspace }}/stacks/solo_network

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2.0.3
      # with:
      #   terraform_wrapper: false
    
    - name: Terraform Init
      run: |
        cd ${{ github.workspace }}/stacks/solo_network
        terraform init -backend-config=storage_account_name=$TerraformBackendStorageAccount -backend-config=container_name=$TerraformBackendStorageContainer -backend-config=key=dev.tfstate -backend-config=resource_group_name=$TerraformBackendResourceGroup -backend-config=subscription_id="$ARM_SUBSCRIPTION_ID" -backend-config=tenant_id="$ARM_TENANT_ID" -backend-config=client_id="$ARM_CLIENT_ID" -backend-config=client_secret="$ARM_CLIENT_SECRET"
 
    - name: Terraform Plan
      run: |
        cd ${{ github.workspace }}/stacks/solo_network
        terraform plan -var-file=../env/$environmentName/$environmentName.tfvars -out=envolve.tfplan
        
    - name: Terraform fmt
      run: |
        cd ${{ github.workspace }}/stacks/solo_network
        terraform show -no-color -json envolve.tfplan > envolve.json

    - name: Setup Infracost
      run: |
        sudo apt-get update -qq && sudo apt-get -qq install bc curl git
        curl -sL https://github.com/infracost/infracost/releases/latest/download/infracost-linux-amd64.tar.gz | tar xz -C /tmp
        sudo mv /tmp/infracost-linux-amd64 /usr/bin/infracost
        curl -sL -o infracost_diff.sh https://raw.githubusercontent.com/infracost/infracost/master/scripts/ci/diff.sh
        chmod +x infracost_diff.sh
        #./infracost_diff.sh
        infracost breakdown --no-color --path ${{ github.workspace }}/stacks/solo_network/envolve.json
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken) # Do not change this, it's used to post comments
        INFRACOST_API_KEY: ${{ secrets.INFRACOST_API_KEY }}
        ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
        ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
        path: ${{ github.workspace }}/stacks/solo_network/envolve.json

    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }